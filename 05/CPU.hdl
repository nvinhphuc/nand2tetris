// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU loads to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    Mux16(a=aluoutput, b=instruction, sel=Ainstruction, out=amuxout);
    Or(a=Ainstruction, b=instruction[5], out=loadA); // load A register if Ainstruction or 6th bit set to true
    ARegister(in=amuxout, load=loadA, out=aregisterout);

    And(a=Cinstruction, b=instruction[4], out=loadD);
    DRegister(in=aluoutput, load=loadD, out=dregisterout); // load D register if Cinstruction and 5th bit set to true
    Mux16(a=aregisterout, b=inM, sel=instruction[12], out=alumuxout);

    ALU(x=dregisterout, y=alumuxout, zx=instruction[11], 
        nx=instruction[10], zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], 
        out=aluoutput, out=outM, zr=aluoutequalszero, ng=aluoutlesszero);

    And(a=Cinstruction, b=instruction[3], out=writeM);
    And16(a=true, b=aregisterout, out[0..14]=addressM);

    Not(in=aluoutequalszero, out=aluoutnotequalzero);
    Or(a=aluoutequalszero, b=aluoutlesszero, out=aluoutlessequalzero);
    Not(in=aluoutlessequalzero, out=aluoutgreaterzero);
    Or(a=aluoutgreaterzero, b=aluoutequalszero, out=aluoutgreaterequalzero);

    Not(in=instruction[0], out=notj1);
    Not(in=instruction[1], out=notj2);
    Not(in=instruction[2], out=notj3);
    Not(in=notj1, out=j1);
    Not(in=notj2, out=j2);
    Not(in=notj3, out=j3);

    // JGT
    And(a=j1, b=notj2, out=j1notj2);
    And(a=j1notj2, b=notj3, out=jgt);
    // JEQ
    And(a=notj1, b=j2, out=notj1j2);
    And(a=notj1j2, b=notj3, out=jeq);
    // JGE
    And(a=j1, b=j2, out=j1j2);
    And(a=j1j2, b=notj3, out=jge);
    // JLT
    And(a=notj1, b=notj2, out=notj1notj2);
    And(a=notj1notj2, b=j3, out=jlt);
    // JNE
    And(a=j1notj2, b=j3, out=jne);
    // JLE
    And(a=notj1j2, b=j3, out=jle);
    // JMP
    And(a=j1j2, b=j3, out=jmp);


    And(a=jgt, b=aluoutgreaterzero, out=jmp1);
    And(a=jeq, b=aluoutequalszero, out=jmp2);
    And(a=jge, b=aluoutgreaterequalzero, out=jmp3);
    And(a=jlt, b=aluoutlesszero, out=jmp4);
    And(a=jne, b=aluoutnotequalzero, out=jmp5);
    And(a=jle, b=aluoutlessequalzero, out=jmp6);

    Or(a=jmp1, b=jmp2, out=jmp12);
    Or(a=jmp12, b=jmp3, out=jmp123);
    Or(a=jmp123, b=jmp4, out=jmp1234);
    Or(a=jmp1234, b=jmp5, out=jmp12345);
    Or(a=jmp12345, b=jmp6, out=jmp123456);
    Or(a=jmp123456, b=jmp, out=jump);
    And(a=Cinstruction, b=jump, out=Cjump);

    PC(in=aregisterout, load=Cjump, inc=true, reset=reset, out[0..14]=pc);
}